<?php

/**
 * @file
 * Displays the time it will take to read content on your site.
 */

/**
 * Implements hook_config_info().
 */
function read_time_config_info()
{
  $prefixes['read_time.settings'] = array(
    'label' => t('Read time settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function read_time_form_node_type_form_alter(&$form, &$form_state, $form_id)
{
  $config = config('read_time.settings');
  $type = $form['#node_type'];

  // Get text fields in this bundle.
  $field_instances = field_info_instances('node', $type->type);
  foreach ($field_instances as $field => $field_instance) {
    $field_info = field_info_field($field);
    if (in_array($field_info['type'], array('text', 'text_long', 'text_with_summary'))) {
      $fields[$field] = $field_instance['label'];
    }
  }

  $form['read_time'] = array(
    '#type' => 'fieldset',
    '#title' => t('Read time'),
    '#group' => 'additional_settings',
  );
  $form['read_time']['read_time_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields'),
    '#description' => t('Calculate the combined read time of these fields.'),
    '#options' => $fields,
    '#multiple' => true,
    '#default_value' => $config->get('read_time_fields_' . $type->type),
  );
  $form['read_time']['read_time_wpm'] = array(
    '#type' => 'textfield',
    '#title' => t('Words per minute'),
    '#description' => t('Average reading speed used for the calculation.'),
    '#size' => 2,
    '#maxlength' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
    '#default_value' => $config->get('read_time_wpm_' . $type->type),
  );
  $form['read_time']['read_time_format'] = array(
    '#type' => 'select',
    '#title' => t('Format'),
    '#description' => t('How the calculation will be formatted.'),
    '#options' => array(
      'hour_short' => t('Hours & minutes, short (1 hr, 5 mins)'),
      'hour_long' => t('Hours & minutes, long (1 hour, 5 minutes)'),
      'min_short' => t('Minutes, short (65 mins)'),
      'min_long' => t('Minutes, long (65 minutes)'),
    ),
    '#default_value' => $config->get('read_time_format_' . $type->type),
  );
  $form['read_time']['read_time_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Read time display'),
    '#description' => t("How the read time will be displayed. Use <em>%read_time</em> to output the read time formatted as above."),
    '#default_value' => $config->get('read_time_display_' . $type->type),
  );
  $form['#submit'][] = 'read_time_form_node_type_form_submit';
}

function read_time_form_node_type_form_submit($form, &$form_state)
{
  $values = $form_state['values'];
  $config = config('read_time.settings');
  $config->set('read_time_fields_' . $values['type'], (array) $values['read_time_fields']);
  $config->set('read_time_wpm_' . $values['type'], (string) $values['read_time_wpm']);
  $config->set('read_time_format_' . $values['type'], (string) $values['read_time_format']);
  $config->set('read_time_display_' . $values['type'], (string) $values['read_time_display']);
  $config->save();
}

/**
 * Implements hook_field_extra_fields().
 */
function read_time_field_extra_fields()
{
  foreach (field_info_bundles('node') as $bundle => $bundle_info) {
    $extra['node'][$bundle]['display'] = array(
      'read_time' => array(
        'label' => t('Read time'),
        'description' => t('Read time'),
        'weight' => 0,
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_token_info().
 */
function read_time_token_info()
{
  $info['tokens']['node']['read-time'] = array(
    'name' => t('Read time'),
    'description' => t('Read time'),
  );
  $info['tokens']['node']['read-time-words'] = array(
    'name' => t('Read time: Words'),
    'description' => t('The number of words to count the read time for'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function read_time_tokens($type, $tokens, array $data = array(), array $options = array())
{
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'read-time':
          $replacements[$original] = read_time_node_get_read_time($node);
          break;

        case 'read-time-words':
          $replacements[$original] = read_time_node_get_word_count($node);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_node_insert().
 */
function read_time_node_insert($node)
{
  $read_time = read_time_calculate($node);

  db_insert('read_time')
    ->fields(array(
      'nid' => $node->nid,
      'read_time' => $read_time,
    ))
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function read_time_node_update($node)
{
  $read_time = read_time_calculate($node);

  db_merge('read_time')
    ->key(array(
      'nid' => $node->nid,
    ))
    ->fields(array(
      'read_time' => $read_time,
    ))
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function read_time_node_view($node, $view_mode, $langcode)
{
  // Get read time field settings.
  $display_settings = field_extra_fields_get_display('node', $node->type, $view_mode);
  $settings = $display_settings['read_time'];

  if ($settings['visible']) {
    $read_time = read_time_node_get_read_time($node);

    // Display read time with node.
    $node->content['read_time'] = array(
      '#markup' => '<span class="read-time">' . $read_time . '</span>',
      '#weight' => $settings['weight'],
    );
  }
}

/**
 * Implements hook_node_delete().
 */
function read_time_node_delete($node)
{
  db_delete('read_time')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_type_delete().
 */
function read_time_node_type_delete($info)
{
  config_clear('read_time.settings', 'read_time_fields_' . $info->type);
  config_clear('read_time.settings', 'read_time_wpm_' . $info->type);
  config_clear('read_time.settings', 'read_time_format_' . $info->type);
  config_clear('read_time.settings', 'read_time_display_' . $info->type);
}

/**
 * Calculate read time.
 */
function read_time_calculate($node)
{
  $config = config('read_time.settings');

  // Get read time bundle settings.
  $wpm = $config->get('read_time_wpm_' . $node->type);
  $format = $config->get('read_time_format_' . $node->type);
  $display = $config->get('read_time_display_' . $node->type);

  // Calculate read time.
  $words = read_time_node_get_word_count($node);
  $time = $words / $wpm;

  // Format read time.
  if (in_array($format, array('hour_short', 'hour_long'))) {
    $hours = floor($time / 60);
    $minutes = ceil(fmod($time, 60));
  } else {
    $minutes = ceil($time);
  }
  if (in_array($format, array('hour_long', 'min_long'))) {
    $hour_suffix = 'hour';
    $min_suffix = 'minute';
  } else {
    $hour_suffix = 'hr';
    $min_suffix = 'min';
  }
  $minute_format = format_plural($minutes, '1 ' . $min_suffix, '@count ' . $min_suffix . 's');
  if (!empty($hours)) {
    $hour_format = format_plural($hours, '1 ' . $hour_suffix, '@count ' . $hour_suffix . 's');
    $read_time = format_string('@h, @m', array('@h' => $hour_format, '@m' => $minute_format));
  } else {
    $read_time = $minute_format;
  }

  return check_plain(str_replace('%read_time', $read_time, $display));
}

/**
 * Fetch the number of words of a node to count.
 *
 * @param $node
 *   The node object.
 *
 * @return mixed
 *   The number of words.
 */
function read_time_node_get_word_count($node)
{
  // Get fields to calculate read time of.
  $fields = config_get('read_time.settings', 'read_time_fields_' . $node->type);

  $field_words = '';
  foreach ($fields as $field) {
    $field_items = field_get_items('node', $node, $field);
    foreach ($field_items as $field_item) {
      $field_words .= strip_tags($field_item['value']);
    }
  }

  return str_word_count($field_words);
}

/**
 * Fetch the read time for a node. Recalculate if needed.
 *
 * @param stdClass $node .
 *   The node object.
 *
 * @return string
 *   The read Time.
 */
function read_time_node_get_read_time($node)
{
  // Get read time from database.
  $read_time = db_query('SELECT read_time FROM {read_time} WHERE nid = :nid', array(
    ':nid' => $node->nid,
  ))->fetchField();

  // Calculate read time if it doesn't exist and save to database.
  if (empty($read_time)) {
    $read_time = read_time_calculate($node);

    db_merge('read_time')
      ->key(array(
        'nid' => $node->nid,
      ))
      ->fields(array(
        'read_time' => $read_time,
      ))
      ->execute();
  }

  return $read_time;
}
